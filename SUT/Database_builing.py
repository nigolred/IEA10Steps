#%% Importing all the libraries and external information
import pandas as pd
import mario

path = pd.read_excel('Local paths/path.xlsx', index_col=[0]) # Reading the file where you can store your local path of Exiobase
year = path.loc['year','Value']

def building_SUT(path,year,SUT_agg,IOT_agg): # do everything with the path file
    # Parsing Exiobase SUT and IOT for selected year
    World_SUT = mario.parse_exiobase_sut(path.loc['SUT','Value']) # Importing the SUT that will be used as the main result
    World_IOT = mario.parse_exiobase_3(path.loc['IOT','Value']) # Importing the IOT that will be used to take the extensions

    # Aggregating both SUT and IOT with the same level of aggregation
    World_SUT.aggregate('Aggregations/SUT_agg.xlsx') # Aggregating the SUT with the proper template file (it is generated by MARIO with get_aggregation_excel function) 
    World_IOT.aggregate('Aggregations/IOT_agg.xlsx') # Aggregating the SUT with the proper template file (it is generated by MARIO with get_aggregation_excel function)

    # Adding the
    E_IOT = World_IOT.E # Taking Satellite account from world_IOT
    E_SUT = World_SUT.E # Taking Satellite account from world_SUT (is empty)
    new_E_SUT = pd.DataFrame(0, index=E_IOT.index, columns=E_SUT.columns)
    new_E_SUT.loc[:,(slice(None),'Activity')] = E_IOT.values
    new_units = World_IOT.units['Satellite account']
    #%%
    World_SUT.add_extensions(io= new_E_SUT, 
                            matrix= 'E',
                            units= new_units,
                            EY = World_IOT.EY,
                            inplace=True, # implementing the changes on the database
                            )
    #%%
    World_SUT.to_txt('Database/EUR_RUS_RoW_Exio_{}.txt'.format(year))